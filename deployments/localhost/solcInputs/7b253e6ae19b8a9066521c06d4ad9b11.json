{
  "language": "Solidity",
  "sources": {
    "contracts/Lottery-contract-with-notes.sol": {
      "content": "// // SPDX-License-Identifier: MIT\n\n// pragma solidity ^0.8.7;\n\n// // SECTION THIS imports are for get random number from chainlinkVRF\n// import \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\n// import \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\n// // SECTION THIS import will create time interval to announce new Lotterywinner\n// // import \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\n// import \"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\";\n\n// error Lottery__UpKeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 lotteryState);\n// error Lottery__SendMoreToEnterLottery();\n// error Lottery__TransferFailed();\n// error Lottery__NotOpen();\n\n// /** @title A Sample Lottery Contract\n//  * @author Rohit Kumar Suman\n//  * @notice This contract is for creating an untamperable  decentralized smart contract\n//  * @dev This implements Chainlink VRF v2 and Chainlink Keepers\n//  */\n// // NOTE Calling contracts must inherit from VRFConsumerBase (in this case Lottery) and KeeperCompatibleInterface\n// contract Lottery is VRFConsumerBaseV2, KeeperCompatibleInterface {\n//     // SECTION Type Declarations **************************************************\n//     enum LotteryState {\n//         OPEN,\n//         CALCULATING\n//     } // secretly enum is uint here => uint256 0 = OPEN, 1 = CALCULATING\n\n//     // SECTION state variables **************************************************\n//     uint256 private immutable i_entranceFee;\n\n//     // ANCHOR array of players address, who entered in lottery contract\n//     address payable[] private s_players;\n\n//     // ANCHOR using this contract to requestRandomWinner(or \"requestRandomWords\" mentioned in chainlink contract)\n//     VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\n\n//     // ANCHOR gaslane(or keyHash) = it is the maximum number of gas(gaslimit) We want to spend to get random number from chainlink orcale.\n//     //     Different keyHash's have different gas price\n//     //    * ceilings, so you can select a specific one to bound your maximum per request cost.\n//     bytes32 private immutable i_gaslane;\n\n//     // ANCHOR The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash.\n//     uint64 private immutable i_subscriptionId;\n\n//     // ANCHOR RequestConfirmations - How many blocks you'd like the oracle to wait before responding to the request.\n//     uint16 private constant REQUEST_CONFIRMATIONS = 3;\n\n//     // ANCHOR callbackGasLimit - How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function(argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]\n//     uint32 private immutable i_callbackGasLimit;\n\n//     // ANCHOR numWords = how many random numbers we want\n//     uint32 private constant NUM_WORDS = 1;\n\n//     // SECTION LOTTERY (state) VARIABLES **************************************************\n//     address private s_recentWinner;\n//     LotteryState private s_lotteryState;\n//     // ANCHOR get the \"last block timestamp\" in order to get if enough time has passed to run new lottery game\n//     uint256 private s_lastTimeStamp;\n//     // ANCHOR to set the interval b/w next lottery game\n//     uint256 private immutable i_interval;\n\n//     // SECTION Events **************************************************\n//     // NOTE name events with the function name reversed\n//     event LotteryEnter(address indexed player); // indexed = will index this data in logs\n//     event RequestedLotteryWinner(uint256 indexed requestId);\n//     event WinnerPicked(address indexed winner);\n\n//     // SECTION Constructor **************************************************\n//     constructor(\n//         address vrfCoordinatorV2,\n//         uint256 entranceFee,\n//         bytes32 gaslane,\n//         uint64 subscriptionId,\n//         uint32 callbackGasLimit,\n//         uint256 interval\n//     ) VRFConsumerBaseV2(vrfCoordinatorV2) {\n//         i_entranceFee = entranceFee;\n//         i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\n//         i_gaslane = gaslane;\n//         i_subscriptionId = subscriptionId;\n//         i_callbackGasLimit = callbackGasLimit;\n//         s_lotteryState = LotteryState.OPEN;\n//         s_lastTimeStamp = block.timestamp;\n//         i_interval = interval;\n//     }\n\n//     // SECTION ENTER LOTTERY FUNCTION **************************************************\n//     function enterLottery() public payable {\n//         if (msg.value < i_entranceFee) {\n//             revert Lottery__SendMoreToEnterLottery();\n//         }\n//         // if lottery is not open for any reason\n//         if (s_lotteryState != LotteryState.OPEN) {\n//             revert Lottery__NotOpen();\n//         }\n\n//         s_players.push(payable(msg.sender));\n//         // Emit an event when we update a dynamic array or mapping\n//         emit LotteryEnter(msg.sender);\n//     }\n\n//     /**\n//      * @dev This is the function that the chainlink keeper nodes call they look for the `upKeepNeeded` to return true.\n//      * The following conditions should be true in order to return true:\n//      * 1. The Lottery should be in an \"open\" state.\n//      * 2. Our time interval should have passed.\n//      * 3. The lottery should have atleast 1 player, and have some ETH\n//      * 4. Our subscription is funded with LINK.\n//      *\n//      */\n//     // SECTION Check UpKeep Function **************************************************\n//     function checkUpkeep(\n//         bytes memory /*checkData*/\n//     )\n//         public\n//         view\n//         override\n//         returns (\n//             bool upKeepNeeded,\n//             bytes memory /*performData*/\n//         )\n//     {\n//         // ANCHOR CHECK-1 IF \"Lottery is open!\"\"\n//         bool isOpen = (LotteryState.OPEN == s_lotteryState);\n//         // ANCHOR CHECK-2 IF \"Our time interval have passed!\"\n//         // NOTE to get current time we're gonna need = block.timestamp (global variable) but to get if enough time has passed, we're going to need to get the \"last block timestamp\"\n//         bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\n//         // ANCHOR CHECK-3 if \"The lottery have any player\"\n//         bool hasPlayers = (s_players.length > 0);\n//         // ANCHOR CHECK-3.2 if \"The lottery have some ETH\"\n//         bool hasBalance = address(this).balance > 0;\n//         // ANCHOR return variable, if it is true then it's time to request new random number\n//         bool upKeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\n//     }\n\n//     // SECTION To GET Random Number FUNCTION **************************************************\n//     function performUpkeep(\n//         bytes calldata /*performData*/\n//     ) external override {\n//         // ANCHOR checking if checkUpKeep is true! so it only runs if it's true and nobody can call this function out of blue\n//         (bool upKeepNeeded, ) = checkUpkeep(\"\");\n//         if (!upKeepNeeded) {\n//             // NOTE adding some parameters in error. so, we can see why its reverting\n//             revert Lottery__UpKeepNotNeeded(\n//                 address(this).balance,\n//                 s_players.length,\n//                 uint256(s_lotteryState)\n//             );\n//         }\n\n//         // NOTE its function of VRFCoordinatorV2Interface contract in chainlink\n//         // ANCHOR this requestRandomWords returns a unique request ID that defines who is requesting this requestRandomWords parameters.\n//         s_lotteryState = LotteryState.CALCULATING; // random number is calculating so nobody can enter our lottery.\n//         uint256 requestId = i_vrfCoordinator.requestRandomWords(\n//             i_gaslane,\n//             i_subscriptionId,\n//             REQUEST_CONFIRMATIONS,\n//             i_callbackGasLimit,\n//             NUM_WORDS\n//         );\n//         emit RequestedLotteryWinner(requestId);\n//     }\n\n//     // SECTION GET RANDOM NUMBER and What to do with that random number **************************************************\n//     // ANCHOR once we get the random number we would like to pick a random winner from the s_players array\n//     function fulfillRandomWords(\n//         uint256, /*requestId*/\n//         uint256[] memory randomWords\n//     ) internal override {\n//         /* NOTE  analogy of how random winnner picked!\n//          To pick a random number we will modulo from solidity which works something like this -\n//         - s_players size is 10 (10 players)\n//         - randomNumber = 202 (in reality this will be a massive number)\n//         - 202 % 10 (10 works like modulo here) = 20.2 \n//         - Modulo dont give answer in decimal. It'll give that which is doesn't divide evenly into 202, That number is \"2\"\n//         -  20 * 10 = 200 (202 - 200 = 2 )\n//         - Random Winner will be 2nd player\n//          */\n//         uint256 indexOfWinner = randomWords[0] % s_players.length;\n//         // randomWords[0] = coz we are getting only 1 random number\n//         address payable recentWinner = s_players[indexOfWinner];\n//         s_recentWinner = recentWinner;\n\n//         // ANCHOR lottery is open again for new round\n//         s_lotteryState = LotteryState.OPEN;\n\n//         // ANCHOR resetting the players array to new\n//         s_players = new address payable[](0);\n\n//         // ANCHOR resetting the timestamp\n//         s_lastTimeStamp = block.timestamp;\n\n//         // ANCHOR sending all the money to the winner\n//         (bool success, ) = recentWinner.call{value: address(this).balance}(\"\");\n//         if (!success) {\n//             revert Lottery__TransferFailed();\n//         }\n\n//         // ANCHOR query emit winners easily\n//         emit WinnerPicked(recentWinner);\n//     }\n\n//     // SECTION reading state variables value from blockchain **************************************************\n//     function getEntranceFee() public view returns (uint256) {\n//         return i_entranceFee;\n//     }\n\n//     function getPlayer(uint256 index) public view returns (address) {\n//         return s_players[index];\n//     }\n\n//     function getRecentwinner() public view returns (address) {\n//         return s_recentWinner;\n//     }\n\n//     function getLotteryState() public view returns (LotteryState) {\n//         return s_lotteryState;\n//     }\n\n//     // NOTE since NUM_WORDS is in bytes code coz it is a CONSTANT variable, So this function isn't reading from storage therefore we made this pure instead of view\n//     function getNumWords() public pure returns (uint256) {\n//         return NUM_WORDS;\n//     }\n\n//     function getNumberOfPlayers() public view returns (uint256) {\n//         return s_players.length;\n//     }\n\n//     function getLastTimeStamp() public view returns (uint256) {\n//         return s_lastTimeStamp;\n//     }\n\n//     function getRequestConfirmations() public pure returns (uint256) {\n//         return REQUEST_CONFIRMATIONS;\n//     }\n// }\n"
    },
    "contracts/Lottery.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\";\n\nerror Lottery__UpKeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 lotteryState);\nerror Lottery__SendMoreToEnterLottery();\nerror Lottery__TransferFailed();\nerror Lottery__NotOpen();\n\n/** @title A Sample Lottery Contract\n * @author Rohit Kumar Suman\n * @notice This contract is for creating an untamperable  decentralized smart contract\n * @dev This implements Chainlink VRF v2 and Chainlink Keepers\n */\ncontract Lottery is VRFConsumerBaseV2, KeeperCompatibleInterface {\n    // Type Declarations\n    enum LotteryState {\n        OPEN,\n        CALCULATING\n    }\n\n    // State Variables\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\n    uint256 private immutable i_entranceFee;\n    address payable[] private s_players;\n    bytes32 private immutable i_gaslane;\n    uint64 private immutable i_subscriptionId;\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\n    uint32 private immutable i_callbackGasLimit;\n    uint32 private constant NUM_WORDS = 1;\n\n    // LOTTERY (state) VARIABLES\n    address private s_recentWinner;\n    LotteryState private s_lotteryState;\n    uint256 private s_lastTimeStamp;\n    uint256 private immutable i_interval;\n\n    // Events\n    event LotteryEnter(address indexed player);\n    event RequestedLotteryWinner(uint256 indexed requestId);\n    event WinnerPicked(address indexed winner);\n\n    // FUNCTIONS\n    constructor(\n        address vrfCoordinatorV2,\n        uint256 entranceFee,\n        bytes32 gaslane,\n        uint64 subscriptionId,\n        uint32 callbackGasLimit,\n        uint256 interval\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\n        i_entranceFee = entranceFee;\n        i_gaslane = gaslane;\n        i_subscriptionId = subscriptionId;\n        i_callbackGasLimit = callbackGasLimit;\n        i_interval = interval;\n        s_lotteryState = LotteryState.OPEN;\n        s_lastTimeStamp = block.timestamp;\n    }\n\n    function enterLottery() public payable {\n        if (msg.value < i_entranceFee) {\n            revert Lottery__SendMoreToEnterLottery();\n        }\n        // if lottery is not open for any reason\n        if (s_lotteryState != LotteryState.OPEN) {\n            revert Lottery__NotOpen();\n        }\n\n        s_players.push(payable(msg.sender));\n        // Emit an event when we update a dynamic array or mapping\n        emit LotteryEnter(msg.sender);\n    }\n\n    /**\n     * @dev This is the function that the chainlink keeper nodes call they look for the `upKeepNeeded` to return true.\n     * The following conditions should be true in order to return true:\n     * 1. The lottery is open.\n     * 2. The time interval has passed between lottery runs.\n     * 3. The contract has ETH.\n     * 4. Implicity, your subscription is funded with LINK.\n     */\n    // SECTION Check UpKeep Function **************************************************\n    function checkUpkeep(\n        bytes memory /*checkData*/\n    )\n        public\n        view\n        override\n        returns (\n            bool upKeepNeeded,\n            bytes memory /*performData*/\n        )\n    {\n        bool isOpen = LotteryState.OPEN == s_lotteryState;\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\n        bool hasPlayers = s_players.length > 0;\n        bool hasBalance = address(this).balance > 0;\n        bool upKeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\n        // return (upKeepNeeded, \"0x0\"); // can we comment this out?\n    }\n\n    /**\n     * @dev Once `checkUpkeep` is returning `true`, this function is called\n     * and it kicks off a Chainlink VRF call to get a random winner.\n     */\n    function performUpkeep(\n        bytes calldata /*performData*/\n    ) external override {\n        (bool upKeepNeeded, ) = checkUpkeep(\"\");\n        if (!upKeepNeeded) {\n            revert Lottery__UpKeepNotNeeded(\n                address(this).balance,\n                s_players.length,\n                uint256(s_lotteryState)\n            );\n        }\n        s_lotteryState = LotteryState.CALCULATING;\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\n            i_gaslane,\n            i_subscriptionId,\n            REQUEST_CONFIRMATIONS,\n            i_callbackGasLimit,\n            NUM_WORDS\n        );\n        emit RequestedLotteryWinner(requestId);\n    }\n\n    /**\n     * @dev This is the function that Chainlink VRF node\n     * calls to send the money to the random winner.\n     */\n    function fulfillRandomWords(\n        uint256, /*requestId*/\n        uint256[] memory randomWords\n    ) internal override {\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\n        address payable recentWinner = s_players[indexOfWinner];\n        s_recentWinner = recentWinner;\n        s_lotteryState = LotteryState.OPEN;\n        s_players = new address payable[](0);\n        s_lastTimeStamp = block.timestamp;\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\"\");\n        if (!success) {\n            revert Lottery__TransferFailed();\n        }\n        emit WinnerPicked(recentWinner);\n    }\n\n    /** @notice Getter Functions */\n\n    function getEntranceFee() public view returns (uint256) {\n        return i_entranceFee;\n    }\n\n    function getPlayer(uint256 index) public view returns (address) {\n        return s_players[index];\n    }\n\n    function getRecentwinner() public view returns (address) {\n        return s_recentWinner;\n    }\n\n    function getLotteryState() public view returns (LotteryState) {\n        return s_lotteryState;\n    }\n\n    function getNumWords() public pure returns (uint256) {\n        return NUM_WORDS;\n    }\n\n    function getNumberOfPlayers() public view returns (uint256) {\n        return s_players.length;\n    }\n\n    function getLastTimeStamp() public view returns (uint256) {\n        return s_lastTimeStamp;\n    }\n\n    function getRequestConfirmations() public pure returns (uint256) {\n        return REQUEST_CONFIRMATIONS;\n    }\n\n    function getInterval() public view returns (uint256) {\n        return i_interval;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/KeeperCompatible.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./KeeperBase.sol\";\nimport \"./interfaces/KeeperCompatibleInterface.sol\";\n\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\n"
    },
    "@chainlink/contracts/src/v0.8/KeeperBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract KeeperBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function preventExecution() internal view {\n    if (tx.origin != address(0)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    preventExecution();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface KeeperCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// A mock for testing code that relies on VRFCoordinatorV2.\npragma solidity ^0.8.4;\n\nimport \"../interfaces/LinkTokenInterface.sol\";\nimport \"../interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"../VRFConsumerBaseV2.sol\";\n\ncontract VRFCoordinatorV2Mock is VRFCoordinatorV2Interface {\n  uint96 public immutable BASE_FEE;\n  uint96 public immutable GAS_PRICE_LINK;\n  uint16 public immutable MAX_CONSUMERS = 100;\n\n  error InvalidSubscription();\n  error InsufficientBalance();\n  error MustBeSubOwner(address owner);\n  error TooManyConsumers();\n  error InvalidConsumer();\n  error InvalidRandomWords();\n\n  event RandomWordsRequested(\n    bytes32 indexed keyHash,\n    uint256 requestId,\n    uint256 preSeed,\n    uint64 indexed subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords,\n    address indexed sender\n  );\n  event RandomWordsFulfilled(uint256 indexed requestId, uint256 outputSeed, uint96 payment, bool success);\n  event SubscriptionCreated(uint64 indexed subId, address owner);\n  event SubscriptionFunded(uint64 indexed subId, uint256 oldBalance, uint256 newBalance);\n  event SubscriptionCanceled(uint64 indexed subId, address to, uint256 amount);\n  event ConsumerAdded(uint64 indexed subId, address consumer);\n  event ConsumerRemoved(uint64 indexed subId, address consumer);\n\n  uint64 s_currentSubId;\n  uint256 s_nextRequestId = 1;\n  uint256 s_nextPreSeed = 100;\n  struct Subscription {\n    address owner;\n    uint96 balance;\n  }\n  mapping(uint64 => Subscription) s_subscriptions; /* subId */ /* subscription */\n  mapping(uint64 => address[]) s_consumers; /* subId */ /* consumers */\n\n  struct Request {\n    uint64 subId;\n    uint32 callbackGasLimit;\n    uint32 numWords;\n  }\n  mapping(uint256 => Request) s_requests; /* requestId */ /* request */\n\n  constructor(uint96 _baseFee, uint96 _gasPriceLink) {\n    BASE_FEE = _baseFee;\n    GAS_PRICE_LINK = _gasPriceLink;\n  }\n\n  function consumerIsAdded(uint64 _subId, address _consumer) public view returns (bool) {\n    address[] memory consumers = s_consumers[_subId];\n    for (uint256 i = 0; i < consumers.length; i++) {\n      if (consumers[i] == _consumer) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  modifier onlyValidConsumer(uint64 _subId, address _consumer) {\n    if (!consumerIsAdded(_subId, _consumer)) {\n      revert InvalidConsumer();\n    }\n    _;\n  }\n\n  /**\n   * @notice fulfillRandomWords fulfills the given request, sending the random words to the supplied\n   * @notice consumer.\n   *\n   * @dev This mock uses a simplified formula for calculating payment amount and gas usage, and does\n   * @dev not account for all edge cases handled in the real VRF coordinator. When making requests\n   * @dev against the real coordinator a small amount of additional LINK is required.\n   *\n   * @param _requestId the request to fulfill\n   * @param _consumer the VRF randomness consumer to send the result to\n   */\n  function fulfillRandomWords(uint256 _requestId, address _consumer) external {\n    fulfillRandomWordsWithOverride(_requestId, _consumer, new uint256[](0));\n  }\n\n  /**\n   * @notice fulfillRandomWordsWithOverride allows the user to pass in their own random words.\n   *\n   * @param _requestId the request to fulfill\n   * @param _consumer the VRF randomness consumer to send the result to\n   * @param _words user-provided random words\n   */\n  function fulfillRandomWordsWithOverride(\n    uint256 _requestId,\n    address _consumer,\n    uint256[] memory _words\n  ) public {\n    uint256 startGas = gasleft();\n    if (s_requests[_requestId].subId == 0) {\n      revert(\"nonexistent request\");\n    }\n    Request memory req = s_requests[_requestId];\n\n    if (_words.length == 0) {\n      _words = new uint256[](req.numWords);\n      for (uint256 i = 0; i < req.numWords; i++) {\n        _words[i] = uint256(keccak256(abi.encode(_requestId, i)));\n      }\n    } else if (_words.length != req.numWords) {\n      revert InvalidRandomWords();\n    }\n\n    VRFConsumerBaseV2 v;\n    bytes memory callReq = abi.encodeWithSelector(v.rawFulfillRandomWords.selector, _requestId, _words);\n    (bool success, ) = _consumer.call{gas: req.callbackGasLimit}(callReq);\n\n    uint96 payment = uint96(BASE_FEE + ((startGas - gasleft()) * GAS_PRICE_LINK));\n    if (s_subscriptions[req.subId].balance < payment) {\n      revert InsufficientBalance();\n    }\n    s_subscriptions[req.subId].balance -= payment;\n    delete (s_requests[_requestId]);\n    emit RandomWordsFulfilled(_requestId, _requestId, payment, success);\n  }\n\n  /**\n   * @notice fundSubscription allows funding a subscription with an arbitrary amount for testing.\n   *\n   * @param _subId the subscription to fund\n   * @param _amount the amount to fund\n   */\n  function fundSubscription(uint64 _subId, uint96 _amount) public {\n    if (s_subscriptions[_subId].owner == address(0)) {\n      revert InvalidSubscription();\n    }\n    uint96 oldBalance = s_subscriptions[_subId].balance;\n    s_subscriptions[_subId].balance += _amount;\n    emit SubscriptionFunded(_subId, oldBalance, oldBalance + _amount);\n  }\n\n  function requestRandomWords(\n    bytes32 _keyHash,\n    uint64 _subId,\n    uint16 _minimumRequestConfirmations,\n    uint32 _callbackGasLimit,\n    uint32 _numWords\n  ) external override onlyValidConsumer(_subId, msg.sender) returns (uint256) {\n    if (s_subscriptions[_subId].owner == address(0)) {\n      revert InvalidSubscription();\n    }\n\n    uint256 requestId = s_nextRequestId++;\n    uint256 preSeed = s_nextPreSeed++;\n\n    s_requests[requestId] = Request({subId: _subId, callbackGasLimit: _callbackGasLimit, numWords: _numWords});\n\n    emit RandomWordsRequested(\n      _keyHash,\n      requestId,\n      preSeed,\n      _subId,\n      _minimumRequestConfirmations,\n      _callbackGasLimit,\n      _numWords,\n      msg.sender\n    );\n    return requestId;\n  }\n\n  function createSubscription() external override returns (uint64 _subId) {\n    s_currentSubId++;\n    s_subscriptions[s_currentSubId] = Subscription({owner: msg.sender, balance: 0});\n    emit SubscriptionCreated(s_currentSubId, msg.sender);\n    return s_currentSubId;\n  }\n\n  function getSubscription(uint64 _subId)\n    external\n    view\n    override\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    )\n  {\n    if (s_subscriptions[_subId].owner == address(0)) {\n      revert InvalidSubscription();\n    }\n    return (s_subscriptions[_subId].balance, 0, s_subscriptions[_subId].owner, s_consumers[_subId]);\n  }\n\n  function cancelSubscription(uint64 _subId, address _to) external override onlySubOwner(_subId) {\n    emit SubscriptionCanceled(_subId, _to, s_subscriptions[_subId].balance);\n    delete (s_subscriptions[_subId]);\n  }\n\n  modifier onlySubOwner(uint64 _subId) {\n    address owner = s_subscriptions[_subId].owner;\n    if (owner == address(0)) {\n      revert InvalidSubscription();\n    }\n    if (msg.sender != owner) {\n      revert MustBeSubOwner(owner);\n    }\n    _;\n  }\n\n  function getRequestConfig()\n    external\n    pure\n    override\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    )\n  {\n    return (3, 2000000, new bytes32[](0));\n  }\n\n  function addConsumer(uint64 _subId, address _consumer) external override onlySubOwner(_subId) {\n    if (s_consumers[_subId].length == MAX_CONSUMERS) {\n      revert TooManyConsumers();\n    }\n\n    if (consumerIsAdded(_subId, _consumer)) {\n      return;\n    }\n\n    s_consumers[_subId].push(_consumer);\n    emit ConsumerAdded(_subId, _consumer);\n  }\n\n  function removeConsumer(uint64 _subId, address _consumer)\n    external\n    override\n    onlySubOwner(_subId)\n    onlyValidConsumer(_subId, _consumer)\n  {\n    address[] storage consumers = s_consumers[_subId];\n    for (uint256 i = 0; i < consumers.length; i++) {\n      if (consumers[i] == _consumer) {\n        address last = consumers[consumers.length - 1];\n        consumers[i] = last;\n        consumers.pop();\n        break;\n      }\n    }\n\n    emit ConsumerRemoved(_subId, _consumer);\n  }\n\n  function getConfig()\n    external\n    view\n    returns (\n      uint16 minimumRequestConfirmations,\n      uint32 maxGasLimit,\n      uint32 stalenessSeconds,\n      uint32 gasAfterPaymentCalculation\n    )\n  {\n    return (4, 2_500_000, 2_700, 33285);\n  }\n\n  function getFeeConfig()\n    external\n    view\n    returns (\n      uint32 fulfillmentFlatFeeLinkPPMTier1,\n      uint32 fulfillmentFlatFeeLinkPPMTier2,\n      uint32 fulfillmentFlatFeeLinkPPMTier3,\n      uint32 fulfillmentFlatFeeLinkPPMTier4,\n      uint32 fulfillmentFlatFeeLinkPPMTier5,\n      uint24 reqsForTier2,\n      uint24 reqsForTier3,\n      uint24 reqsForTier4,\n      uint24 reqsForTier5\n    )\n  {\n    return (\n      100000, // 0.1 LINK\n      100000, // 0.1 LINK\n      100000, // 0.1 LINK\n      100000, // 0.1 LINK\n      100000, // 0.1 LINK\n      0,\n      0,\n      0,\n      0\n    );\n  }\n\n  function getFallbackWeiPerUnitLink() external view returns (int256) {\n    return 4000000000000000; // 0.004 Ether\n  }\n\n  function requestSubscriptionOwnerTransfer(uint64 _subId, address _newOwner) external pure override {\n    revert(\"not implemented\");\n  }\n\n  function acceptSubscriptionOwnerTransfer(uint64 _subId) external pure override {\n    revert(\"not implemented\");\n  }\n\n  function pendingRequestExists(uint64 subId) public view override returns (bool) {\n    revert(\"not implemented\");\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool success);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool success);\n}\n"
    },
    "contracts/mocks/VRFCoordinatorV2Mock.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol\";\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}